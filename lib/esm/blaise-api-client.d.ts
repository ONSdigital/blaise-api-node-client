import { AxiosInstance } from "axios";
import { Outcome } from "./interfaces/cases";
import * as diagonisticsMocks from "./mock-objects/diagnostic-mock-objects";
import * as instrumentMocks from "./mock-objects/instrument-mock-objects";
import BlaiseIapNodeProvider from "blaise-iap-node-provider";
import * as users from "./blaise-api-client/users";
import * as instruments from "./blaise-api-client/instruments";
import * as cases from "./blaise-api-client/cases";
import * as diagnostics from "./blaise-api-client/diagnostics";
export declare type BlaiseApiConfig = {
    timeoutInMs?: number;
    blaiseApiClientId?: string;
};
declare class BlaiseApiClient {
    blaiseApiUrl: string;
    blaiseIapProvider?: BlaiseIapNodeProvider;
    httpClient: AxiosInstance;
    constructor(blaiseApiUrl: string, config?: BlaiseApiConfig);
    getUser: typeof users.getUser;
    getUsers: typeof users.getUsers;
    validatePassword: typeof users.validatePassword;
    createUser: typeof users.createUser;
    deleteUser: typeof users.deleteUser;
    getUserRoles: typeof users.getUserRoles;
    changePassword: typeof users.changePassword;
    getAllInstrumentsWithCatiData: typeof instruments.getAllInstrumentsWithCatiData;
    getInstrumentsWithCatiData: typeof instruments.getInstrumentsWithCatiData;
    getInstrumentWithCatiData: typeof instruments.getInstrumentWithCatiData;
    getInstruments: typeof instruments.getInstruments;
    instrumentExists: typeof instruments.instrumentExists;
    doesInstrumentHaveMode: typeof instruments.doesInstrumentHaveMode;
    getInstrument: typeof instruments.getInstrument;
    installInstrument: typeof instruments.installInstrument;
    deleteInstrument: typeof instruments.deleteInstrument;
    getInstrumentCaseIds: typeof instruments.getInstrumentCaseIds;
    getInstrumentModes: typeof instruments.getInstrumentModes;
    getInstrumentSettings: typeof instruments.getInstrumentSettings;
    getDaybatch: typeof instruments.getDaybatch;
    addDaybatch: typeof instruments.addDaybatch;
    getSurveyDays: typeof instruments.getSurveyDays;
    addSurveyDays: typeof instruments.addSurveyDays;
    getCase: typeof cases.getCase;
    addCase: typeof cases.addCase;
    activateInstrument: typeof cases.activateInstrument;
    deactivateInstrument: typeof cases.deactivateInstrument;
    getCaseStatus: typeof cases.getCaseStatus;
    getDiagnostics: typeof diagnostics.getDiagnostics;
    private url;
    protected get(url: string): Promise<any>;
    protected post(url: string, data: any): Promise<any>;
    protected delete(url: string): Promise<any>;
    protected patch(url: string, data?: any | undefined): Promise<any>;
    private axiosConfig;
}
export default BlaiseApiClient;
export * from "./interfaces/instruments";
export * from "./interfaces/diagnostics";
export * from "./interfaces/cases";
export * from "./interfaces/users";
export { diagonisticsMocks, instrumentMocks, Outcome };
