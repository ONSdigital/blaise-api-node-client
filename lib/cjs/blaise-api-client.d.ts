import { AxiosInstance } from "axios";
import { Instrument, InstallInstrument, InstallInstrumentResponse, InstrumentSettings, DaybatchResponse, DaybatchSettings, SurveyDays, CaseResponse, CaseFields, CaseStatus, Outcome } from "./interfaces/instrument";
import { Diagnostic } from "./interfaces/diagnostic";
import { DiagnosticMockObject } from "./mock-objects/diagnostic-mock-objects";
import { InstrumentListMockObject, InstrumentMockObject, InstallInstrumentMockObject, InstallInstrumentResponseMockObject, InstrumentSettingsMockList } from "./mock-objects/instrument-mock-objects";
import BlaiseIapNodeProvider from "blaise-iap-node-provider";
declare class BlaiseApiClient {
    blaiseApiUrl: string;
    blaiseIapProvider?: BlaiseIapNodeProvider;
    httpClient: AxiosInstance;
    constructor(blaiseApiUrl: string, timeoutInMs?: number, blaiseApiClientId?: string);
    getAllInstrumentsWithCatiData(): Promise<Instrument[]>;
    getInstrumentsWithCatiData(serverpark: string): Promise<Instrument[]>;
    getInstrumentWithCatiData(serverpark: string, instrumentName: string): Promise<Instrument>;
    getInstruments(serverpark: string): Promise<Instrument[]>;
    instrumentExists(serverpark: string, instrumentName: string): Promise<boolean>;
    doesInstrumentHaveMode(serverpark: string, instrumentName: string, mode: string): Promise<boolean>;
    getInstrument(serverpark: string, instrumentName: string): Promise<Instrument>;
    installInstrument(serverpark: string, instrument: InstallInstrument): Promise<InstallInstrumentResponse>;
    deleteInstrument(serverpark: string, instrumentName: string): Promise<null>;
    getInstrumentCaseIds(serverpark: string, instrumentName: string): Promise<string[]>;
    getDiagnostics(): Promise<Diagnostic[]>;
    getInstrumentModes(serverpark: string, instrumentName: string): Promise<string[]>;
    getInstrumentSettings(serverpark: string, instrumentName: string): Promise<InstrumentSettings[]>;
    getDaybatch(serverpark: string, instrumentName: string): Promise<DaybatchResponse>;
    addDaybatch(serverpark: string, instrumentName: string, daybatchSettings: DaybatchSettings): Promise<DaybatchResponse>;
    getSurveyDays(serverpark: string, instrumentName: string): Promise<string[]>;
    addSurveyDays(serverpark: string, instrumentName: string, surveyDays: SurveyDays): Promise<string[]>;
    getCase(serverpark: string, instrumentName: string, caseID: string): Promise<CaseResponse>;
    addCase(serverpark: string, instrumentName: string, caseID: string, caseFields: CaseFields): Promise<CaseResponse>;
    activateInstrument(serverpark: string, instrumentName: string): Promise<null>;
    deactivateInstrument(serverpark: string, instrumentName: string): Promise<null>;
    getCaseStatus(serverpark: string, instrumentName: string): Promise<CaseStatus[]>;
    private url;
    private get;
    private post;
    private delete;
    private patch;
    private axiosConfig;
}
export default BlaiseApiClient;
export type { Instrument, InstallInstrument, InstallInstrumentResponse, Diagnostic, InstrumentSettings, CaseFields, CaseResponse, SurveyDays, DaybatchResponse, DaybatchSettings, CaseStatus };
export { DiagnosticMockObject };
export { InstrumentListMockObject, InstrumentMockObject, InstallInstrumentMockObject, InstallInstrumentResponseMockObject, InstrumentSettingsMockList, Outcome };
