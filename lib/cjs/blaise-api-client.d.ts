import { AxiosInstance } from "axios";
import { Outcome } from "./interfaces/cases";
import BlaiseIapNodeProvider from "blaise-iap-node-provider";
import * as users from "./blaise-api-client/users";
import * as questionnaires from "./blaise-api-client/questionnaires";
import * as cases from "./blaise-api-client/cases";
import * as diagnostics from "./blaise-api-client/diagnostics";
export declare type BlaiseApiConfig = {
    timeoutInMs?: number;
    blaiseApiClientId?: string;
};
declare class BlaiseApiClient {
    blaiseApiUrl: string;
    blaiseIapProvider?: BlaiseIapNodeProvider;
    httpClient: AxiosInstance;
    constructor(blaiseApiUrl: string, config?: BlaiseApiConfig);
    getUser: typeof users.getUser;
    getUsers: typeof users.getUsers;
    validatePassword: typeof users.validatePassword;
    createUser: typeof users.createUser;
    deleteUser: typeof users.deleteUser;
    getUserRoles: typeof users.getUserRoles;
    changePassword: typeof users.changePassword;
    getAllQuestionnairesWithCatiData: typeof questionnaires.getAllQuestionnairesWithCatiData;
    getQuestionnairesWithCatiData: typeof questionnaires.getQuestionnairesWithCatiData;
    getQuestionnaireWithCatiData: typeof questionnaires.getQuestionnaireWithCatiData;
    getQuestionnaires: typeof questionnaires.getQuestionnaires;
    questionnaireExists: typeof questionnaires.questionnaireExists;
    doesQuestionnaireHaveMode: typeof questionnaires.doesQuestionnaireHaveMode;
    getQuestionnaire: typeof questionnaires.getQuestionnaire;
    installQuestionnaire: typeof questionnaires.installQuestionnaire;
    deleteQuestionnaire: typeof questionnaires.deleteQuestionnaire;
    getQuestionnaireCaseIds: typeof questionnaires.getQuestionnaireCaseIds;
    getQuestionnaireModes: typeof questionnaires.getQuestionnaireModes;
    getQuestionnaireSettings: typeof questionnaires.getQuestionnaireSettings;
    activateQuestionnaire: typeof questionnaires.activateQuestionnaire;
    deactivateQuestionnaire: typeof questionnaires.deactivateQuestionnaire;
    getDaybatch: typeof questionnaires.getDaybatch;
    addDaybatch: typeof questionnaires.addDaybatch;
    getSurveyDays: typeof questionnaires.getSurveyDays;
    addSurveyDays: typeof questionnaires.addSurveyDays;
    getCase: typeof cases.getCase;
    addCase: typeof cases.addCase;
    getCaseStatus: typeof cases.getCaseStatus;
    getDiagnostics: typeof diagnostics.getDiagnostics;
    private url;
    protected get(url: string): Promise<any>;
    protected post(url: string, data: any): Promise<any>;
    protected delete(url: string): Promise<any>;
    protected patch(url: string, data?: any | undefined): Promise<any>;
    private axiosConfig;
}
export default BlaiseApiClient;
export * from "./interfaces/questionnaires";
export * from "./interfaces/diagnostics";
export * from "./interfaces/cases";
export * from "./interfaces/users";
export * from "./survey-days";
export * from "./mock-objects/diagnostic-mock-objects";
export * from "./mock-objects/questionnaire-mock-objects";
export { Outcome };
